JavaScript Callback Functions Notes
===================================

- Callback functions are a powerful feature of JavaScript, widely used in the language itself and in the browser. They are used to handle events, process data, and control the program's flow.

- "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action." – MDN Web Docs

So, in essence, it is the idea that a function, or collection of code under a given banner, can be used in other functions?

JavaScript treats functions as "first-class citizens," which means:
- You can pass functions as arguments to other functions.
- You can return functions from other functions.
- You can assign functions to variables.
- Two types: Synchonous, and Asynchonous:

Synchronous:

function greet(name) {
    console.log("Hello, " + name + "!");
}

function processUserInput(callback) {
    const name = "Kevin";
    callback(name);
}

processUserInput(greet);

Asychronous:

setTimeout(function () {
    console.log("This runs after 2 seconds");
}, 2000);

So, it does look like a callback function is just a function that is nested inside another functions parameters. 

And as for synchronous and asynchronous .. one happens at the same time (synchronous) and the other happens delayed or at a different time (asynchronous). 

====================================================

Conventional way of writing functions:

function square(x) {
    return x * x
}
Square(5) // 25

Way to write an anonymous function that's just assigned to a variable:

const square = function(x) {
    return x * x
}
// square(5)

===========================================

Some methods that can be run on functions:

forEach() - Accepts a callback function and executes the given function once for each element of the array.
map() - The map() function creates a new array with the result of calling the callback function on each element of array.
find() - Return the first element from the array which satisfies the given callback function.
filter() - Creates a new array with all elements that pass the test implemented by the provided callback function.
every() - This function checks that every item in the array passes the callback function. It returns boolean value.
some() - This method is much similar to the every() method but the difference is that it returns true if any of the item(s) in the array passes the given function.
sort() - Sort function by default performs Natural order sorting( Treat everything as string and compare character by character ). We can pass a compare callback function to update the behavior of sorting.
reduce() - It executes a reducer method on each element of array and results in a single value.

===========================================

1. forEach()
Accepts a callback function and executes the given function once for each element of the array.

Example | Iterate an array of numbers
const nums = [1,2,3,4,5];
nums.forEach(function(num) {
   console.log(num);
});
output:
1
4
9
16
25
Example-2: Iterate an object
const employees = [
    {
        id: 101,
        name: 'Alex',
        sal: 10000
    },
    {
        id: 102,
        name: 'Clark',
        sal: 13000
    },
    {
        id: 103,
        name: 'John',
        sal: 12000
    },
    {
        id: 104,
        name: 'Tony',
        sal: 20000
    }
]
employees.forEach(function(emp) {
    console.log(emp.name.toUpperCase());
});
Output:
ALEX
CLARK
JOHN
TONY

====================================================

2. map()
The map() function creates a new array with the result of calling the callback function on each element of array.

Example — 1| Square the each element of array and store result into another array
const nums = [1,2,3,4,5]
const squareNums = nums.map(function(num) {
      return num * num;
});
console.log(squareNums); // [1, 4, 9, 16, 25]
Example — 2 | Create an array of all employee names by fetching employee names from a given object.
const employees = [
    {
        id: 101,
        name: 'Alex',
        sal: 10000
    },
    {
        id: 102,
        name: 'Clark',
        sal: 13000
    },
    {
        id: 103,
        name: 'John',
        sal: 12000
    },
    {
        id: 104,
        name: 'Tony',
        sal: 20000
    }
];
const names = employees.map(function(emp) {
      return emp.name;
});
console.log(names); // ['Alex', 'Clark', 'John', 'Tony']
Example — 3 | Make abbreviations
const words = ['lol','brb','btw','lmk','g2g'];
const abbreviations = words.map(function(word) {
      return word.toUpperCase().split('').join('.');
});
console.log(abbreviations); // ['L.O.L', 'B.R.B', 'B.T.W', 'L.M.K', 'G.2.G']

==============================================================

3. find()
Return the first element from the array which satisfies the given callback function.

Example — 1: Find the name
const names = ['Jimmy Shah','Ram Sharma','Vikram Gupta','Shyam Sharma'];
const result = names.find(name => name.includes('Sharma'))
console.log(result); // Ram Sharma
Example — 2: Find employee who earn more than 20,000.
const employees = [
    {
        id: 101,
        name: 'Alex',
        sal: 10000
    },
    {
        id: 102,
        name: 'Clark',
        sal: 23000
    },
    {
        id: 103,
        name: 'John',
        sal: 22000
    },
    {
        id: 104,
        name: 'Tony',
        sal: 20000
    }
];
const emp = employees.find(e => e.sal >= 20000)
console.log(emp) // {id: 102, name: 'Clark', sal: 23000}

====================================================

4. filter()
Creates a new array with all elements that pass the test implemented by the provided callback function.

Example — 1: Filter names
const names = ['Jimmy Shah','Ram Sharma','Vikram Gupta','Shyam Sharma'];
const result = names.filter(name => name.includes('Sharma'))
console.log(result); //  ['Ram Sharma', 'Shyam Sharma']
Example — 2: Filter employees by salary
const employees = [
    {
        id: 101,
        name: 'Alex',
        sal: 10000
    },
    {
        id: 102,
        name: 'Clark',
        sal: 23000
    },
    {
        id: 103,
        name: 'John',
        sal: 22000
    },
    {
        id: 104,
        name: 'Tony',
        sal: 20000
    }
];
const filtered = employees.filter(e => e.sal >= 20000)
console.log(filtered);
Output:
[ 
  {id: 102, name: 'Clark', sal: 23000},
  {id: 103, name: 'John', sal: 22000},
  {id: 104, name: 'Tony', sal: 20000}
]

========================================================

5. every()
This function checks that every item in the array passes the callback function. It returns boolean value.

Example — 1:
const words = ['kia','karen','king','korean'];
// Check all words starts with k
console.log(words.every(word => word[0] === 'k')) // true
// Check all words ends with g
console.log(words.every(word => word[words.length-1] === 'g')) // false

========================================================

6. some()
This method is much similar to the every() method but the difference is that it returns true if any of the item(s) in the array passes the given function.

const words = ['kia','karen','king','korean'];
// Check all words starts with k
console.log(words.some(word => word[0] === 'k')) // true
// Check all words ends with g
console.log(words.some(word => word[words.length-1] === 'g')) // true

=======================================================

7. Sort()
We are all aware about sorting, but sort function by default performs Natural order sorting( Treat everything as string and compare character by character ). But we can pass a compare callback function to update the behavior of sorting.

Syntax(compareFunc(a,b))

Compare function takes two items a and b from the array and compares them.

If a-b > 0 then it sorts in ascending order.
if a-b < 0 then it sorts in descending order.
Example — 1: Natural Order Sorting
const nums = [1,20,10,22,30,44,100,11];
nums.sort(); // [1, 10, 100, 11, 20, 22, 30, 44]
Example — 2: Ascending order sorting
const nums = [1,20,10,22,30,44,100,11];
nums.sort((a,b) => a - b); // [1, 10, 11, 20, 22, 30, 44, 100]

==========================================================

8. reduce()
It executes a reducer method on each element of array and results in a single value.

Example — 1: Sum of array elements
const nums = [1,2,3,4,5];
let output = nums.reduce((accumulator,currentValue) => accumulator + currentValue);
console.log(output); //15
You can understand the execution by the following figure…

reduce() method execution
Observe the execution figure, In the first call first value is considered as accumulator and iteration starts from second value.

From the second call whatever the return value is stored in the accumulator and the next value is picked as the current value.

Example — 2: Find maximum using reducer() method
const nums = [44,2,66,45,17];
let result = nums.reduce((max,item) => Math.max(max,item))
console.log(result); // 66
Example — 3: Tallying Votes
const votes = ['y','y','n','y','n','n','n'];
const result = votes.reduce((tally,vote) => {
   tally[vote] = ( tally[vote] || 0 ) + 1 
    return tally;
},{}); // Initial value: {}
Output:
{y: 3, n: 4}

==========================================================
